<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 SYSTEM "../../../dtd/dblite.dtd">
<sect1 id="tgit-dug-conflicts">
	<?dbhh topicname="HIDD_RESOLVE"?>
	<title>Resolving Conflicts</title>
	<indexterm>
		<primary>conflict</primary>
	</indexterm>
	<indexterm>
		<primary>resolve</primary>
	</indexterm>
	<para>
		Once in a while, you will get a <emphasis>conflict</emphasis> when
		you update your files from the repository. A conflict
		occurs when two or more developers have changed the same
		few lines of a file. As Git knows nothing of your
		project, it leaves resolving the conflicts to the developers.
		Whenever a conflict is reported, you should open the file in
		question, and search for lines starting with the string
		<literal>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</literal>.
		The conflicting area is marked like this:
<screen>
&lt;&lt;&lt;&lt;&lt;&lt;&lt; filename
    your changes
=======
    code merged from repository
&gt;&gt;&gt;&gt;&gt;&gt;&gt; revision
</screen>
	</para>
	<para>
		You can launch an external merge tool / conflict
		editor with
		<menuchoice>
			<guimenu>TortoiseGit</guimenu>
			<guimenuitem>Edit Conflicts</guimenuitem>
		</menuchoice>
		or you can use any other editor to manually
		resolve the conflict. You should decide what the code
		should look like, do the necessary changes and save the file.

		For this, Git places three additional files in your directory for the selected conflicted file:
		<variablelist>
			<varlistentry>
				<term>filename.ext.LOCAL.ext</term>
				<listitem>
					<para>
						This is your file as it existed in your
						working tree before you updated your working tree
						- that is, without conflict markers. This file has
						your latest changes in it and nothing else.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>filename.ext.BASE.ext</term>
				<listitem>
					<para>
						This is the file that was the BASE
						revision before you updated your working tree. That is,
						it the file that you checked out before you made
						your latest edits.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>filename.ext.REMOTE.ext</term>
				<listitem>
					<para>
						This is the file that your Git
						client just received from the server when you updated
						your working tree. This file corresponds to the HEAD
						revision of the repository.
					</para>
				</listitem>
			</varlistentry>
		</variablelist>
	</para>
	<para>
		Afterwards execute the command
		<menuchoice>
			<guimenu>TortoiseGit</guimenu>
			<guimenuitem>Resolved</guimenuitem>
		</menuchoice>
		and commit your modifications to the repository.
		Please note that the Resolve command does not really
		resolve the conflict. 
		It uses "git add" to mark file status as resolved
		to allow you to commit your changes
		and it removes the
		<filename>filename.ext.BASE.ext</filename>,
		<filename>filename.ext.LOCAL.ext</filename> and
		<filename>filename.ext.REMOTE.ext</filename> files.
	</para>
	<para>
		If you have conflicts with binary files, Git does
		not attempt to merge the files itself. The local file remains
		unchanged (exactly as you last changed it) and you have
		<filename>filename.ext.BASE|LOCAL|REMOTE.ext</filename> files.
		If you want to discard your changes and keep the repository
		version, just use the Revert command. If you want to keep
		your version and overwrite the repository version, use the
		<guimenuitem>Resolved</guimenuitem> command, then commit your version.
	</para>
	<para>
		You can use the <guimenuitem>Resolved</guimenuitem> command for multiple files
		if you right click on the parent folder and select
		<menuchoice>
			<guimenu>TortoiseGit</guimenu>
			<guimenuitem>Resolve...</guimenuitem>
		</menuchoice>
		This will bring up a dialog listing all conflicted files
		in that folder, and you can select which ones to mark
		as resolved.
		<figure id="tgit-dug-conflicts-dia-1">
			<title>The resolve conflicts dialog</title>
			<graphic fileref="../images/ResolveConflict.png"/>
		</figure>
	</para>
	<important>
		<para>
			In Git (unlike SVN) you have to <link linkend="tgit-dug-commit">commit</link> after resolving conflicts.
		</para>
	</important>
	<sect2 id="tgit-dug-conflicts-special">
		<title>Special conflict cases</title>
		<sect3 id="tgit-dug-conflicts-special-delete-modify">
			<title>Delete-modify conflicts</title>
			<?dbhh topicname="HIDD_RESOLVE_CONFLICT"?>
			<para>
				A special conflict case is a delete-modify conflict. Here, a file is deleted on one branch and the same file is modified on another branch.
				In order to resolve this conflict the user has to decide whether to keep the modified version or delete the file from the working tree.
			</para>
			<para>
				<figure id="tgit-dug-conflicts-special-delete-modify-dialog">
					<title>Resolve delete-modify conflict Dialog</title>
					<graphic fileref="../images/resolve-delete-modify-conflict.png"/>
				</figure>
			</para>
		</sect3>
		<sect3 id="tgit-dug-conflicts-special-submodule">
			<title>Submodule conflicts</title>
			<?dbhh topicname="HIDD_RESOLVESUBMODULECONFLICT"?>
			<para>
				Another special conflict case is a conflict involving a submodule. Here, a submodule is changed in different (conflicting) ways on two branches.
			</para>
			<para>
				The resolve submodule conflict dialog shows the base, the local and the remote commit of the conflicting submodule as well as the commit type (rewind, fast-forward, ...).
				<figure id="tgit-dug-conflicts-special-submodule-dialog">
					<title>Resolve submodule conflict Dialog</title>
					<graphic fileref="../images/resolve-submodule-conflict.png"/>
				</figure>
			</para>
			<important>
				<title>Uninitialized submodules</title>
				<para>
					If the submodule is not yet initialized the resolve submodule conflict dialog only shows the commit IDs (SHA-1). Also, the conflict cannot be resolved automatically:
					First, you have to manually clone the submodule into the right folder. Then, you can resolve the conflict using TortoiseGit or git (by checking out the right commit in the submodule and commiting the parent working tree).
				</para>
			</important>
		</sect3>
	</sect2>
</sect1>
